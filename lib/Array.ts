declare global {
    interface Array<T> {
        /**
         * Checks if the array is empty or null.
         * @returns true if the array is empty or null, otherwise, false.
         * @example
         * const emptyArray: number[] = [];
         * const populatedArray: number[] = [1, 2, 3];
         * console.log(emptyArray.isNullOrEmpty()); // true
         * console.log(populatedArray.isNullOrEmpty()); // false
         */
        isNullOrEmpty(): boolean;

        /**
         * Checks if the array is not empty or null.
         * @returns true if the array is not empty or null, otherwise, false.
         * @example
         * const emptyArray: number[] = [];
         * const populatedArray: number[] = [1, 2, 3];
         * console.log(emptyArray.isNotNullOrEmpty()); // false
         * console.log(populatedArray.isNotNullOrEmpty()); // true
         */
        isNotNullOrEmpty(): boolean;

        /**
         * Checks if the array is not empty.
         * @returns true if the array is not empty, otherwise, false.
         * @example
         * const emptyArray: number[] = [];
         * const populatedArray: number[] = [1, 2, 3];
         * console.log(emptyArray.isNotEmpty()); // false
         * console.log(populatedArray.isNotEmpty()); // true
         */
        isNotEmpty(): boolean;

        /**
         * Checks if the array is empty.
         * @returns true if the array is empty, otherwise, false.
         * @example
         * const emptyArray: number[] = [];
         * const populatedArray: number[] = [1, 2, 3];
         * console.log(emptyArray.isEmpty()); // true
         * console.log(populatedArray.isEmpty()); // false
         */
        isEmpty(): boolean;

        /**
         * Get the first element of the array.
         * @returns The first element of the array or undefined if the array is empty.
         * @example
         * const array: number[] = [1, 2, 3];
         * console.log(array.first()); // 1
         */
        first(): T | undefined;

        /**
         * Get the last element of the array.
         * @returns The last element of the array or undefined if the array is empty.
         * @example
         * const array: number[] = [1, 2, 3];
         * console.log(array.last()); // 3
         */
        last(): T | undefined;

        /**
         * Checks if any element in the array meets a specified condition.
         * @param condition - A function that defines the condition to check for each element.
         * @returns true if at least one element meets the condition, otherwise, false.
         * @example
         * const array: number[] = [1, 2, 3, 4, 5];
         * const hasEven = array.any(item => item % 2 === 0);
         * console.log(hasEven); // true
         */
        any(condition: (item: T) => boolean): boolean;

        /**
         * Checks if all elements in the array meet a specified condition.
         * @param condition - A function that defines the condition to check for each element.
         * @returns true if all elements meet the condition, otherwise, false.
         * @example
         * const array: number[] = [1, 2, 3, 4, 5];
         * const allPositive = array.all(item => item > 0);
         * console.log(allPositive); // true
         */
        all(condition: (item: T) => boolean): boolean;

        /**
         * Remove duplicate elements from the array and return a new array with distinct elements.
         * @returns A new array with distinct elements.
         * @example
         * const arrayWithDuplicates = [1, 2, 2, 3, 3, 4, 5, 5];
         * const distinctArray = arrayWithDuplicates.distinct();
         * console.log(distinctArray); // [1, 2, 3, 4, 5]
         */
        distinct(): T[];

        /**
         * Remove duplicate elements from the array based on a selector and return a new array with distinct elements.
         * @param selector - A function that defines the selector to determine element distinctness.
         * @returns A new array with distinct elements based on the selector.
         * @example
         * const objectsWithDuplicates = [{ id: 1 }, { id: 2 }, { id: 1 }];
         * const distinctObjects = objectsWithDuplicates.distinctBy(item => item.id);
         * console.log(distinctObjects); // [{ id: 1 }, { id: 2 }]
         */
        distinctBy<K>(selector: (item: T) => K): T[];

        /**
         * Perform an action on each element of the array in the order they appear, based on a key generated by a selector.
         * @param keySelector - A function that defines the selector to generate sorting keys.
         * @param action - A function that defines the action to be performed on each element.
         * @example
         * const people = [
         *   { name: 'Gian', age: 21 },
         *   { name: 'Davi', age: 23 },
         *   { name: 'John Doe', age: 999 }
         * ];
         * people.forEachOrderedBy(item => item.age, person => {
         *   console.log(person.name); // Gian, Davi, John Doe (sorted by age)
         * });
         */
        forEachOrderedBy<K>(keySelector: (item: T) => K, action: (item: T) => void): void;

        /**
         * Perform an action on each element of the array, providing the index of the element.
         * @param action - A function that defines the action to be performed on each element.
         * @example
         * const array: number[] = [1, 2, 3];
         * array.forEachIndexed((item, index) => {
         *   console.log(`Element at index ${index}: ${item}`);
         * });
         */
        forEachIndexed(action: (item: T, index: number) => void): void;

        /**
         * Perform an action on each element of the array quickly, without maintaining order.
         * @param action - A function that defines the action to be performed on each element.
         * @example
         * const array: number[] = [3, 1, 4, 2];
         * array.fastForEach(item => {
         *   console.log(item);
         * });
         */
        fastForEach(action: (item: T) => void): void;

        /**
         * Execute an action on each element of the array starting from an initial index.
         * @param startIndex - The initial index from which the action will start.
         * @param action - A callback function that defines whether the action should be executed on each element.
         * @example
         * const array: number[] = [1, 2, 3, 4, 5];
         * array.forEachRemaining(2, (item, index) => {
         *   console.log(`Element at index ${index}: ${item}`);
         * });
         */
        forEachRemaining(startIndex: number, action: (item: T, index: number) => void): void;

        /**
         * Calculate the sum of all elements in the array.
         * @returns The sum of all elements in the array. Returns 0 if the array is empty.
         * @example
         * const numbers = [1, 2, 3, 4, 5];
         * const sum = numbers.sumOf();
         * console.log(sum); // 15
         */
        sumOf(): number;
    }
}

Array.prototype.isNullOrEmpty = function () {
    return this === null || this.length === 0;
};

Array.prototype.isEmpty = function () {
    return this.length === 0;
};

Array.prototype.isNotEmpty = function () {
    return this.length !== 0;
};

Array.prototype.first = function () {
    return this.length > 0 ? this[0] : undefined;
};

Array.prototype.last = function () {
    return this.length > 0 ? this[this.length - 1] : undefined;
};

Array.prototype.any = function (condition: (item: any) => boolean): boolean {
    return this.some(condition);
};

Array.prototype.all = function (condition: (item: any) => boolean): boolean {
    return this.every(condition)
};

Array.prototype.distinct = function () {
    return Array.from(new Set(this));
};

Array.prototype.forEachOrderedBy = function <T, K>(keySelector: (item: T) => K, action: (item: T) => void) {
    const sortedArray = [...this].sort((a, b) => {
        const keyA = keySelector(a);
        const keyB = keySelector(b);
        return keyA < keyB ? -1 : keyA > keyB ? 1 : 0;
    });
    sortedArray.forEach(action);
}

Array.prototype.forEachIndexed = function <T>(action: (item: T, index: number) => void) {
    for (let i = 0; i < this.length; i++) {
        action(this[i], i);
    }
};

Array.prototype.fastForEach = function <T>(action: (item: T) => void) {
    for (let i = 0; i < this.length; i++) {
        const item = this[i];
        action(item);
    }
};

Array.prototype.distinctBy = function <T, K>(selector: (item: T) => K) {
    const map = new Map<K, T>();
    const list: T[] = [];

    for (const item of this) {
        const key = selector(item);

        if (!map.has(key)) {
            map.set(key, item);
            list.push(item);
        }
    }
    return list;
};

Array.prototype.forEachRemaining = function (startIndex, action) {
    if (startIndex < 0 || startIndex >= this.length) {
        return;
    }

    for (let i = startIndex; i < this.length; i++) {
        action(this[i], i);
    }
};

Array.prototype.sumOf = function () {
    if (this.length === 0) {
        return 0
    }
    return this.reduce((accumulator, currentValue) => accumulator + currentValue, 0)
};

export { }